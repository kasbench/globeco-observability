apiVersion: opentelemetry.io/v1beta1
kind: OpenTelemetryCollector
metadata:
  name: otel-collector
  namespace: monitoring
spec:
  mode: deployment
  image: otel/opentelemetry-collector-contrib:latest
  serviceAccount: otel-collector
  # Ports configuration
  ports:
    - name: otlp-grpc
      port: 4317
      targetPort: 4317
      protocol: TCP
    - name: otlp-http
      port: 4318
      targetPort: 4318
      protocol: TCP
    - name: prometheus
      port: 8889
      targetPort: 8889
      protocol: TCP
    - name: health
      port: 13133
      targetPort: 13133
      protocol: TCP
  
  # OpenTelemetry Collector configuration
  config: |
    receivers:
      otlp:
        protocols:
          grpc:
            endpoint: 0.0.0.0:4317
          http:
            endpoint: 0.0.0.0:4318
            cors:
              allowed_origins:
                - "http://*"
                - "https://*"
      
      # Prometheus receiver to scrape metrics from other services
      prometheus:
        config:
          scrape_configs:
            - job_name: 'otel-collector'
              scrape_interval: 30s
              static_configs:
                - targets: ['localhost:8889']
    
    processors:
      batch:
        timeout: 1s
        send_batch_size: 1024
        send_batch_max_size: 2048
      
      memory_limiter:
        limit_mib: 512
        spike_limit_mib: 128
        check_interval: 5s
      
      # Add resource attributes
      resource:
        attributes:
          - key: service.name
            value: otel-collector
            action: upsert
          - key: service.version
            value: "1.0.0"
            action: upsert
    
    exporters:
      # Prometheus exporter - this exposes metrics for Prometheus to scrape
      prometheus:
        endpoint: "0.0.0.0:8889"
        namespace: "otel"
        const_labels:
          environment: "production"
        metric_expiration: 180m
        resource_to_telemetry_conversion:
          enabled: true
      
      # Optional: Export to other backends
      logging:
        loglevel: info
        sampling_initial: 2
        sampling_thereafter: 500
    
    extensions:
      health_check:
        endpoint: 0.0.0.0:13133
      
      pprof:
        endpoint: localhost:1777
      
      zpages:
        endpoint: localhost:55679
    
    service:
      extensions: [health_check, pprof, zpages]
      pipelines:
        metrics:
          receivers: [otlp, prometheus]
          processors: [memory_limiter, resource, batch]
          exporters: [prometheus, logging]
        
        traces:
          receivers: [otlp]
          processors: [memory_limiter, resource, batch]
          exporters: [logging]
        
        logs:
          receivers: [otlp]
          processors: [memory_limiter, resource, batch]
          exporters: [logging]
  
  # Resource configuration
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 128Mi
  
  # Replica configuration
  replicas: 1
  
  # Pod template customization
  podAnnotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8889"
    prometheus.io/path: "/metrics"
  
  # Environment variables
  env:
    - name: MY_POD_IP
      valueFrom:
        fieldRef:
          fieldPath: status.podIP
    - name: MY_POD_NAME
      valueFrom:
        fieldRef:
          fieldPath: metadata.name
    - name: MY_NODE_NAME
      valueFrom:
        fieldRef:
          fieldPath: spec.nodeName

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: otel-collector
  namespace: monitoring

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: otel-collector
rules:
  - apiGroups: [""]
    resources: ["pods", "nodes", "services", "endpoints", "namespaces"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["apps"]
    resources: ["replicasets", "deployments", "daemonsets", "statefulsets"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["extensions"]
    resources: ["replicasets", "deployments", "daemonsets"]
    verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: otel-collector
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: otel-collector
subjects:
  - kind: ServiceAccount
    name: otel-collector
    namespace: monitoring

---
# Optional: ServiceMonitor for Prometheus Operator (remove if not using Prometheus Operator)
# apiVersion: monitoring.coreos.com/v1
# kind: ServiceMonitor
# metadata:
#   name: otel-collector
#   namespace: monitoring
#   labels:
#     app: otel-collector
# spec:
#   selector:
#     matchLabels:
#       app.kubernetes.io/name: otel-collector
#   endpoints:
#     - port: prometheus
#       interval: 30s
#       path: /metrics
#       honorLabels: true
#   namespaceSelector:
#     matchNames:
#       - monitoring
